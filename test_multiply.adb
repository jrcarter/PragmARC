
with Ada.Real_Time;
with Ada.Text_IO;
with Gnat.Os_Lib;

with PragmARC.Unbounded_Integers;

procedure Test_Multiply is
   package PUI renames PragmARC.Unbounded_Integers;
   use type PUI.Unbounded_Integer;

   package ART renames Ada.Real_Time;
   use type ART.Time_Span;

   procedure Check_Value (Proper : String; Actual : String; Comment : String := "") is
   begin  -- Check_Value
      if Proper /= Actual then
         Ada.Text_IO.Put_Line ("**** Assertion failed. **** " & Comment);
         Ada.Text_IO.Put_Line ("Proper: """ & Proper & """");
         Ada.Text_IO.Put_Line ("Actual: """ & Actual & """");
         Gnat.Os_Lib.Os_Exit (1);
      end if;
   end Check_Value;
   
   function Multiply_As_String (L_Text : String; R_Text : String) return String is
      L : PUI.Unbounded_Integer := PUI.Value (L_Text);
      R : PUI.Unbounded_Integer := PUI.Value (R_Text);
      P : PUI.Unbounded_Integer := L * R;
   begin  -- Multiply_As_String
      return PUI.Image (P, Base => 16, Decorated => True);
   end Multiply_As_String;
   
   function Elapsed_Microseconds (Since : ART.Time) return Integer is
   begin
      return (ART.Clock - Since) / ART.Microseconds (1);
   end Elapsed_Microseconds;

   Start_Time : ART.Time;
   Timing_L : PUI.Unbounded_Integer := PUI.Value ("16#14B66DC33F6ACDCA878D6495A927AB94E6F95481077068718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589717824EF4EBAAABBA7054DF87C50EDDDDCA5E20890F2A5210#");
   Timing_R : PUI.Unbounded_Integer := PUI.Value ("16#14B66DC33F6ACD1FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589717824EF4EBAAABBA7054DF87C50EDDDDCA5E20890F2A5210#");
   Timing_P : PUI.Unbounded_Integer;
   
   Iterations : constant := 10000;

begin  -- Test_Multiply
   Check_Value ("16#0#", Multiply_As_String ("0", "0"));
   Check_Value ("16#1#", Multiply_As_String ("1", "1"));
   Check_Value ("16#2#", Multiply_As_String ("2", "1"));
   Check_Value ("-16#2#", Multiply_As_String ("-2", "1"));
   Check_Value ("-16#2#", Multiply_As_String ("2", "-1"));
   Check_Value ("16#2#", Multiply_As_String ("-2", "-1"));
   Check_Value ("16#3A#", Multiply_As_String ("16#3A#", "1"));
   Check_Value ("16#3A#", Multiply_As_String ("16#1D#", "2"));
   Check_Value ("16#0#", Multiply_As_String ("0", "2"));
   Check_Value ("16#14B66DC33F6ACDCA878D6495A927AB94E6F95481077068718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589717824EF4EBAAABBA7054DF87C50EDDDDCA5E20890F2A5210#",
                Multiply_As_String ("16#123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0#",
                                    "16#123456789abcdef0123456789abcdef00123456789abcdef#"));
   Check_Value ("16#14B66DC33F6ACDCA878D6495A927AB94E6F95481077068718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589718CDB5D11FA1589717824EF4EBAAABBA7054DF87C50EDDDDCA5E20890F2A5210#",
                Multiply_As_String ("16#123456789abcdef0123456789abcdef00123456789abcdef#",
                                    "16#123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0#"));
   
   Ada.Text_IO.Put_Line ("Starting timing test...");
   Start_Time := ART.Clock;
   for I in 1 .. Iterations loop
      Timing_P := Timing_L * Timing_R;
   end loop;
   Ada.Text_IO.Put_Line("Time for " & Integer'Image(Iterations) & " iterations:" &
                          Integer'Image(Elapsed_Microseconds (Since => Start_Time)) & " usec.");
   Ada.Text_IO.Put_Line ("ok");
end Test_Multiply;
